import unittest
import importlib
import pandas as pd
import sqlite3

class TestAssignmentThree(unittest.TestCase):
    def test_01(self):
        result_01 = pd.read_sql(asgmt.answer_01, connection)
        self.assertEqual(result_01.shape, (10, 1))
        tables = result_01.iloc[:, 0].values.tolist()
        self.assertIn("aboriginal_legislators", tables)
        self.assertIn("districts", tables)
        self.assertIn("parties", tables)
        self.assertIn("polling_places", tables)
        self.assertIn("regional_legislators", tables)
    def test_02(self):
        result_02 = pd.read_sql(asgmt.answer_02, connection)
        self.assertEqual(result_02.shape, (4, 2))
        number_of_candidates = result_02.iloc[:, 1].values.tolist()
        self.assertIn(3, number_of_candidates)
    def test_03(self):
        result_03 = pd.read_sql(asgmt.answer_03, connection)
        self.assertEqual(result_03.shape, (22, 2))
        counties = result_03.iloc[:, 0].values.tolist()
        self.assertIn("新北市", counties)
        self.assertIn("臺中市", counties)
        self.assertIn("臺南市", counties)
        self.assertIn("屏東縣", counties)
        self.assertIn("嘉義縣", counties)
        self.assertIn("嘉義市", counties)
    def test_04(self):
        result_04 = pd.read_sql(asgmt.answer_04, connection)
        self.assertEqual(result_04.shape, (7, 2))
        counties = result_04.iloc[:, 0].values.tolist()
        self.assertIn("臺北市", counties)
        self.assertIn("臺南市", counties)
        self.assertIn("新北市", counties)
        self.assertIn("桃園市", counties)
        self.assertIn("臺中市", counties)
        self.assertIn("高雄市", counties)
        self.assertIn("彰化縣", counties)
    def test_05(self):
        result_05 = pd.read_sql(asgmt.answer_05, connection)
        self.assertEqual(result_05.shape, (33, 2))
        parties = result_05.iloc[:, 0].values.tolist()
        self.assertIn("復康聯盟黨", parties)
        self.assertIn("台灣麻將最大黨", parties)
        self.assertIn("社會民主黨", parties)
        self.assertIn("小民參政歐巴桑聯盟", parties)
        self.assertIn("台灣綠黨", parties)
        self.assertIn("台灣基進", parties)
    def test_06(self):
        result_06 = pd.read_sql(asgmt.answer_06, connection)
        parties = result_06.iloc[:, 0].values.tolist()
        self.assertEqual(result_06.shape, (11, 2))
        self.assertIn("制度救世島", parties)
        self.assertIn("臺灣雙語無法黨", parties)
        self.assertIn("司法改革黨", parties)
        self.assertIn("小民參政歐巴桑聯盟", parties)
        self.assertIn("台灣維新", parties)
        self.assertIn("人民最大黨", parties)
    def test_07(self):
        result_07 = pd.read_sql(asgmt.answer_07, connection)
        self.assertEqual(result_07.shape, (53, 6))
    def test_08(self):
        result_08 = pd.read_sql(asgmt.answer_08, connection)
        self.assertEqual(result_08.shape, (8, 6))
        parties = result_08.iloc[:, 3].values.tolist()
        self.assertIn("民主進步黨", parties)
        self.assertIn("中國國民黨", parties)
        elected = result_08.iloc[:, 4].values.tolist()
        self.assertIn("吳思瑤", elected)
        self.assertIn("王世堅", elected)
        self.assertIn("吳沛憶", elected)
        self.assertIn("王鴻薇", elected)
        self.assertIn("李彥秀", elected)
        self.assertIn("賴士葆", elected)
    def test_09(self):
        result_09 = pd.read_sql(asgmt.answer_09, connection)
        self.assertEqual(result_09.shape, (4, 2))
        parties = result_09.iloc[:, 0].values.tolist()
        self.assertIn("民主進步黨", parties)
        self.assertIn("中國國民黨", parties)
        self.assertIn("台灣民眾黨", parties)
        self.assertIn("其他", parties)
        percentages = result_09.iloc[:, 1].values.tolist()
        self.assertLessEqual(sum(percentages), 1.0)
    def test_10(self):
        result_10 = pd.read_sql(asgmt.answer_10, connection)
        self.assertEqual(result_10.shape, (9, 3))
        parties = result_10.iloc[:, 1].values.tolist()
        self.assertIn("民主進步黨", parties)
        self.assertIn("中國國民黨", parties)
        self.assertIn("台灣民眾黨", parties)
        
connection = sqlite3.connect("taiwan_election_2024.db")
asgmt = importlib.import_module("answers")
suite = unittest.TestLoader().loadTestsFromTestCase(TestAssignmentThree)
runner = unittest.TextTestRunner(verbosity=2)
test_results = runner.run(suite)
number_of_failures = len(test_results.failures)
number_of_errors = len(test_results.errors)
number_of_test_runs = test_results.testsRun
number_of_successes = number_of_test_runs - (number_of_failures + number_of_errors)
print(f"You've got {number_of_successes} successes among {number_of_test_runs} questions.")